D1P1 :

You are given an integer array nums and two integers l and r. Your task is to 
find the minimum positive energy produced by a sequence of operations. 
Each operation corresponds to selecting a contiguous subarray of nums 
whose length is between l and r (inclusive).

The energy of a sequence is defined as the product of all the numbers in 
the subarray. You need to find the sequence with the smallest positive energy.

If no such sequence exists, return -1.

Input Format:
---------------
Line-1: Three space separated integers, N, L and R.
Line-2: N space separated integers, array[].

Output Format:
-----------------
An integer result, smallest positive energy.

Sample Input-1:
-----------------
4 2 3
2 -1 3 4

Sample Output-1:
-------------------
12

Explanation:
--------------
The possible sequences of operations with lengths between l = 2 and r = 3 are:

[2, -1] (not valid, energy = -2)
[3, 4] (energy = 12)
[2, -1, 3] (not valid, energy = -6)
The sequence [3, 4] produces the smallest positive energy of 12. Hence, 
the output is 12.

Sample Input-2:
-----------------
3 2 3
-1 -3 2

Sample Output-1:
-------------------
3

Explanation:
No valid sequence produces a positive energy. Thus, the output is -1.

Constraints:
============
1 ≤ nums.length ≤ 100
1 ≤ l ≤ r ≤ nums.length
−1000 ≤ nums[i] ≤ 1000


--------------------------------------------------------------------------------------


D1P2 :

The Kingdom of CodeLand has a long bridge made of square tiles, 
where each tile is painted either red ('R') or blue ('B'). 
A critical mission has been assigned to you: ensure that a section of the 
bridge is sturdy enough to support heavy traffic. Blue tiles are reinforced,
while red tiles are weak and need to be reinforced by painting them blue.

You are given a 0-indexed string bridge of length n, where bridge[i] represents the color of the i-th tile. Each character in bridge is either 'R' (red) or 'B' (blue).

Your goal is to ensure that there is at least one segment of k consecutive blue tiles on the bridge to support heavy traffic. You can repaint a red tile ('R') to a blue tile ('B') in one operation.

Write a program to determine the minimum number of repaint operations needed to create a segment of k consecutive blue tiles.

Input Format:
---------------
Space separated string and integer, S and K

Output Format:
-----------------
An integer value.


Sample Input-1:
------------------
RRBRBBRRBR 4

Sample Output-1:
--------------------
1

Explanation:
-------------
One way to achieve 4 consecutive blue tiles is to repaint the 4th tile to get bridge = "RRBBBBRRBR".
This requires 1 operations.

Sample Input-2:
------------------
BRBRRBB 3

Sample Output-2:
--------------------
1

Explanation:
--------------
One way to achieve 3 consecutive blue tiles is to repaint the 2nd tile to get bridge = "BBBRRBB".
This requires only 1 operation.

Sample Input-3:
------------------
BBBRRBRBRR 5

Sample Output-3:
--------------------
2

Explanation:
--------------
One way to achieve 5 consecutive blue tiles is to repaint the 4th and 9th tiles to get bridge = "BBBBBBBRRR".
This requires 2 operations.


----------------------------------------------------------------------------


D1P3 :

You are an architect tasked with designing a series of connected rooms in a 
building. You are given a list of room sizes represented by an integer array 
roomSizes, an integer maxFrequency representing the maximum number of times 
a particular room size can appear, and an integer maxArea representing 
the maximum allowable total area of connected rooms. A set of connected 
rooms is called viable if the frequency of each room size in this set is 
less than or equal to maxFrequency, and the total area of the rooms in 
this set is less than or equal to maxArea. 

Return the length of the longest viable set of connected rooms from roomSizes.

Input Format:
-------------
Line-1: 3 space separated integers, n, maxFrequency, maxArea
Line-2: N space separated integers, roomSizes[].

Output Format:
-------------
An integer, the length of the longest viable set of connected rooms


Sample Input-1:
---------------
8 2 10
1 2 3 1 2 3 1 2

Sample Output-1:
----------------
5 

Explanation: 
------------
The longest possible viable set of connected rooms is [1, 2, 3, 1, 2] since 
the room sizes 1, 2, and 3 appear at most twice, and the total area is less than 10.

Sample Input-2:
---------------
6 1 3
1 2 1 2 1 2

Sample Output-2:
----------------
2

Explanation: The longest possible viable set of connected rooms is [1, 2] since 
the room sizes 1 and 2 appear at most once, and the total area is 3.

Constraints:
------------
1 <= roomSizes.length <= 10^5
1 <= roomSizes[i] <= 10^4 where roomSizes[i] is the size of the i-th room.
1 <= maxFrequency <= roomSizes.length
1 <= maxArea <= 10^9


-------------------------------------------------------------------------------------


D1JS1 :

/*
You have an array of project objects, each with name, 
revenue, and cost. Use filter to include only projects 
where revenue is greater than cost (profitable projects), 
map to calculate the profit for each project, and reduce 
to find the total profit from these profitable projects.


Sample Input:
-------------
5
ProjectA 500 300
ProjectB 200 250
ProjectC 600 400
ProjectD 150 100
ProjectE 300 400

Sample Output: 
--------------
450

Explanation:
------------
Profitable projects are ProjectA, ProjectC, and ProjectD.
Profits for each are: ProjectA = 200, ProjectC = 200, ProjectD = 50.
Total profit = 200 + 200 + 50 = 450

*/
const readline = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

function solution(projects) {
  //Write your code here and return number
  const upproj = projects.filter(proj=> proj.revenue>proj.cost);
  const mppped = upproj.map(p=> p.revenue  - p.cost);
  const fil = mppped.reduce((acc, p)=>(acc+p  ));
  return fil
  
}

readline.question("", (N) => {
  N = parseInt(N);
  let projects = [];
  let count = 0;

  readline.on("line", (line) => {
    const [name, revenue, cost] = line.split(" ");
    projects.push({ name, revenue: parseFloat(revenue), cost: parseFloat(cost) });
    count++;

    if (count === N) {
      const totalProfit = solution(projects);
      console.log(totalProfit);
      readline.close();
    }
  });
});

---------------------------------------------------------------------------------------


D1JS2 :

/*
You have an array of product objects, each with name, price, 
and sold (number of units sold). Use map to calculate the 
revenue for each product, filter to include only products 
with a revenue of $50 or more, and reduce to find the total 
revenue from these high-selling products.


Sample Input: 
-------------
5
Shampoo 5 15
Soap 2 20
Toothpaste 3 10
Conditioner 10 2
Lotion 8 10

Sample Output: 
--------------
155

Explanation:
------------
Shampoo revenue = 5 * 15 = 75
Soap revenue = 2 * 20 = 40 (not included, as it’s less than 50)
Toothpaste revenue = 3 * 10 = 30 (not included)
Conditioner revenue = 10 * 2 = 20 (not included)
Lotion revenue = 8 * 10 = 80

*/

const readline = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

function solution(products) {
  //Write your code here and return number
  const up = products.map(rev => rev.price*rev.sold);
  const fil = up.filter(proj=> proj>=50 );
 const red = fil.reduce((acc,rev)=>(acc+rev));
  return red;
 
}

readline.question("", (N) => {
  N = parseInt(N);
  let products = [];
  let count = 0;

  readline.on("line", (line) => {
    const [name, price, sold] = line.split(" ");
    products.push({ name, price: parseFloat(price), sold: parseInt(sold) });
    count++;

    if (count === N) {
      const totalRevenue = solution(products);
      console.log(totalRevenue);
      readline.close();
    }
  });
});

------------------------------------------------------------------------------------------------------


D1JS3 :

/*
Given an array of product objects, each with name, price, 
and inStock (boolean). Use filter to include only products 
that are in stock, map to get their quantities, and reduce 
to find the total quantity of these in-stock products.


Sample Input:
-------------
5
Laptop 1000 5 true
Phone 500 3 false
Tablet 300 8 true
Monitor 200 6 false
Keyboard 50 12 true

Sample Output: 
--------------
25

Explanation:
------------
In-stock products are Laptop, Tablet, and Keyboard.
Quantities are 5, 8, and 12.
Total quantity = 5 + 8 + 12 = 25

*/
const readline = require("readline").createInterface({
  input: process.stdin,
  output: process.stdout
});

function solution(products) {
  //Write your code here and return number
  products = products.filter(prod=>prod.inStock);
  //const m = fil.map(prod=>({
  
  return  products.reduce((acc , q)=> (acc+q.quantity),0);
  //return r;
  
}

readline.question("", (N) => {
  N = parseInt(N);
  let products = [];
  let count = 0;

  readline.on("line", (line) => {
    const [name, price, quantity, inStock] = line.split(" ");
    products.push({ name, price: parseFloat(price), quantity: parseInt(quantity), inStock: inStock === 'true' });
    count++;

    if (count === N) {
      const totalQuantity = solution(products);
      console.log(totalQuantity);
      readline.close();
    }
  });
});


-------------------------------------------------------------------------------------------------------
