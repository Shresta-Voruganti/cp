D13P1 :

Imagine you’re decoding a secret message that outlines the hierarchical structure 
of a covert spy network. The message is a string composed of numbers and parentheses. 
Here’s how the code works:

- The string always starts with an agent’s identification number, this is the 
  leader of the network.
- After the leader’s ID, there can be zero, one, or two segments enclosed in 
  parentheses. Each segment represents the complete structure of one subordinate 
  network.
- If two subordinate networks are present, the one enclosed in the first (leftmost) 
  pair of parentheses represents the left branch, and the second (rightmost) 
  represents the right branch.

Your mission is to reconstruct the entire spy network hierarchy based on this 
coded message.

Example 1:
Input: 4(2(3)(1))(6(5))
Output: [4, 2, 6, 3, 1, 5]

Spy network:
        4
       / \
      2   6
     / \  /
    3   1 5

Explanation:
Agent 4 is the leader.
Agent 2 (with its own subordinates 3 and 1) is the left branch.
Agent 6 (with subordinate 5) is the right branch.

Example 2:
Input: 4(2(3)(1))(6(5)(7))
Output: [4, 2, 6, 3, 1, 5, 7]

Spy network:
         4
       /   \
      2     6
     / \   / \
    3   1 5   7

Explanation:
Agent 4 leads the network.
Agent 2 with subordinates 3 and 1 forms the left branch.
Agent 6 with subordinates 5 and 7 forms the right branch.


---------------------------------------------------------------------------------------------------------------------------------------------------------


D13P2 :

Imagine a company where each employee has a performance score, and 
the organizational chart is structured as a binary tree with the CEO at the top. 
An employee is considered "outstanding" if, along the chain of command from the 
CEO down to that employee, no one has a performance score higher than that 
employee's score. Your task is to determine the total number of outstanding 
employees in the company.

Example 1:
Input: 3 1 4 3 -1 1 5
Output: 4

Chart formed:
         3
        / \
       1   4
      /   / \
     3   1   5

Explanation:
- The CEO (score 3) is automatically outstanding.
- The employee with score 4, whose chain is [3,4], is outstanding because 4 
  is higher than 3.
- The employee with score 5, following the path [3,4,5], is outstanding as 5 
  is the highest so far.
- The subordinate with score 3, along the path [3,1,3], is outstanding because 
  none of the managers in that chain have a score exceeding 3.

Example 2:
Input: 3 3 -1 4 2
Output: 3

Chart formed:
       3
      / 
     3
    / \
   4   2

Explanation:
- The CEO (score 3) is outstanding.
- The subordinate with score 3 (chain: [3,3]) is outstanding.
- The employee with score 2 (chain: [3,3,2]) is not outstanding because the 
  managers have higher scores.


--------------------------------------------------------------------------------------------------------------------------------------------------------


D13Q1 - CNN

## Implement a convolutional neural network (CNN) in PyTorch that processes 32×32 RGB images and defines a custom loss function. Your implementation must use the exact variable and function names given below so that the autograder can verify your solution automatically.

           +---------------------+
           |  Input: 32×32×3     |
           +----------+----------+
                      |
                      v
           +---------------------+
           | Conv1: 3×3, s=1,    |
           | no padding, 32 ch   |
           | Output: 30×30×32    |
           +----------+----------+
                      |
                      v
           +---------------------+
           | MaxPool1: 2×2, s=2  |
           | Output: 15×15×32    |
           +----------+----------+
                      |
                      v
           +---------------------+
           | Conv2: 3×3, s=1,    |
           | no padding, 64 ch   |
           | Output: 13×13×64    |
           +----------+----------+
                      |
                      v
           +---------------------+
           | MaxPool2: 2×2, s=2  |
           | Output: 6×6×64      |
           +----------+----------+
                      |
                      v
           +---------------------+
           | Flatten             |
           | (6×6×64 = 2304)     |
           +----------+----------+
                      |
                      v
           +---------------------+
           | Fully Connected     |
           | 2304 → 10           |
           +---------------------+



# YOUR CODE HERE
raise NotImplementedError()


## 1. Network Architecture
Implement a CNN with the following specifications:

### Input:
Images of size 32×32 with 3 channels (RGB).

### Block 1:

Convolutional Layer (conv1):<br>
kernel_size: 3×3<br>
stride: 1<br>
padding: 0 (i.e. no padding)<br>
in_channels: 3<br>
out_channels: 32<br>
Max-Pooling Layer (pool):<br>
kernel_size: 2<br>
stride: 2<br>


### Block 2:

Convolutional Layer (conv2):<br>
kernel_size: 3×3<br>
stride: 1<br>
padding: 0<br>
Output channels: 64<br>
Max-Pooling Layer (pool):<br>
kernel_size: 2<br>
stride: 2<br>

### Fully Connected Layer (fc):

After the two convolution+pooling blocks, flatten the output and add a fully connected layer that maps the 
flattened features to 10 output classes.

### forward Method<br>
Your forward method should perform the following steps exactly:
* Apply ReLU activation after each convolution.
* Use the pooling layer after each convolution block.
* Flatten the output before passing it to the fully connected layer.
* Finally, produce the logits via the fully connected layer.

### Variable Name for the Model:
The final model must be stored in a variable called myModel.


class MyCNN(nn.Module):
    def __init__(self, num_classes=10, input_size=32):
        """
        Constructs a CNN with two convolution+maxpool blocks followed by a fully connected layer.
        
        Specifications:
          - Input: images of size 32x32 with 3 channels.
          - Block 1:
              * Conv layer with kernel_size 3x3, stride 1, no padding, output channels = 32.
              * MaxPool layer with kernel size 2, stride 2.
          - Block 2:
              * Conv layer with kernel_size 3x3, stride 1, no padding, output channels = 64.
              * MaxPool layer with kernel size 2, stride 2.
          - Flatten the features and apply a fully connected layer mapping to output size 10.
        """
        # YOUR CODE HERE
        raise NotImplementedError()
        
    def forward(self, x):
        # YOUR CODE HERE
        raise NotImplementedError()
        return x



## The final model should be stored in the variable 'myModel'


myModel = MyCNN(num_classes=10, input_size=32)


## 2. Loss Function
Define a custom loss function that meets the following criteria:

Function Name:

The function must be named LF.
Function Arguments:

The function should take three parameters: the model's output (logits), the target labels, and the model itself.
Function Behavior:

Compute the standard cross-entropy loss between the output and the target.
Add an L2 regularization term calculated as the sum of squared L2 norms of all the model's parameters.
The regularization term must be scaled by a factor of 0.1.
The function must return a scalar tensor representing the combined loss.
Variable Name for the Loss Function:

The loss function must be stored in a variable called LF (i.e. the function name is LF).



def LF(output, target, model):
    """
    Return:
        Tensor: Scalar loss value.
    """
    # YOUR CODE HERE
    raise NotImplementedError()



### Initialize the _total_params_ value with total number of trainable parameters in the notebook in the network


# YOUR CODE HERE
raise NotImplementedError()



------------------------------------------------------------------------------------------------------------------------------------------------------------
